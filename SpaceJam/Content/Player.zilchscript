class Player : ZilchComponent
{
  // Dependencies
  [Dependency] var Transform : Transform;
  [Dependency] var RigidBody : RigidBody;
  [Dependency] var NetUser : NetUser;
  [Dependency] var SweptController : SweptController;
  
  // Player info string used for logging.
  var PlayerInfo : String
  {
    get { return "<Player #`this.NetUser.NetUserId`>"; }
  }
  
  // Input Keys
  [Property] var MoveForwardKey : Keys = Keys.W;
  [Property] var MoveLeftKey : Keys = Keys.A;
  [Property] var MoveBackKey : Keys = Keys.S;
  [Property] var MoveRightKey : Keys = Keys.D;
  
  [Property] var RunKey : Keys = Keys.Shift;
  [Property] var JumpKey : Keys = Keys.Space;
  [Property] var InteractKey : Keys = Keys.F;
  
  // Player input set by the owning client.
  // (Here we specify in the NetProperty attribute that these properties should replicate over the ClientAuthority NetChannel.
  // This NetChannel configuration specifies that the client who "owns" this NetObject has the authority to replicate property changes
  // to the server and have those values be accepted and applied. The server then relays these changes to the other clients.)
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputUp : Boolean;
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputDown : Boolean;
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputLeft : Boolean;
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputRight : Boolean;
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputJump : Boolean;
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputRun : Boolean;
  
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputActivatePrimary : Boolean;
  var LastInputActivatePrimary : Boolean;
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputActivateSecondary : Boolean;
  var LastInputActivateSecondary : Boolean;
  
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputInteract : Boolean;
  var LastInputInteract : Boolean;
  
  var MyClient_Hud : Space;
  
  [NetProperty(netChannelConfig : "ClientAuthority")]
  var InputAngle : Real2
  {
    get { return this.InputAngleInternal; }
    set
    {
      value.Y = Math.Clamp(value.Y, -Math.Pi / 2, Math.Pi / 2);
      this.InputAngleInternal = value;
    }
  }
  var InputAngleInternal : Real2;
  
  var Sensativity : Real2 = Real2(0.005, 0.005);
  var InteractDistance : Real = 5.0;
  var NormalSpeed : Real = 4.0;
  var RunSpeed : Real = 6.0;
  
  var CameraCog : Cog;
  
  var CharacterAnimations : CharacterAnimations;
  
  var HeldItemParent : Cog;
  var HeldItem : HeldItem
  {
    get
    {
      foreach (var child in this.HeldItemParent.Children)
      {
        return child.HeldItem;
      }
      return null;
    }
  }
  
  function Initialize(init : CogInitializer)
  {
    this.CharacterAnimations = this.Owner.FindChildByName("Character").CharacterAnimations;
    
    this.CameraCog = this.Owner.FindChildByName("Camera");
    
    this.HeldItemParent = this.Owner.FindChildByName("HeldItemParent");
    
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.CogDestroy, this.OnCogDestroy);
    
    this.Transform.WorldTranslation = Real3(0, 5, 0);
    
    // If we're the server, we're responsible for processing the player's inputs set by the owning client.
    if(this.NetUser.IsServer)
    {
      this.Space.SoundSpace.Volume = 0;
    }
    
    // We are a client and this player belongs to us?
    // (Remember, this logic is being run by everyone, that includes the server
    // and other clients, so we must check to see if this player is specifically ours.)
    if(this.NetUser.IsClient)
    {
      if (this.NetUser.IsMine)
      {
        this.MyClient_Hud = this.GameSession.CreateSpace(Archetype.NonNetworkedSpace);
        this.MyClient_Hud.LoadLevel(Level.Hud);
        
        Zero.Mouse.Trapped = true;
      }
      // Other client
      else
      {
        this.CameraCog.CameraViewport.RenderInGame = false;
      }
    }
  }

  function OnCogDestroy(event : ObjectEvent)
  {
    if (this.NetUser.IsMine)
    {
      Zero.Mouse.Trapped = false;
    }
  }
  
  function UpdateCharacter(event : UpdateEvent)
  {
    this.Transform.WorldRotation = Math.AxisAngle(Real3.YAxis, -this.InputAngle.X);
    
    var characterAnimations = this.CharacterAnimations;
    characterAnimations.VerticalAngle = -this.InputAngle.Y;
    characterAnimations.HorizontalAngle = this.InputAngle.X;
    
    characterAnimations.Update(event);
  }
  
  function FindInteract() : Interact
  {
    var segment = Segment();
    segment.Start = this.CameraCog.Transform.WorldTranslation;
    segment.End = segment.Start + this.CameraCog.Orientation.WorldForward * this.InteractDistance;
    var castFilter = CastFilter();
    castFilter.IgnoreStatic = false;
    
    var range = this.Space.PhysicsSpace.CastSegment(segment, 100, castFilter);
    
    foreach (var result in range)
    {
      var interact = result.ObjectHit.Interact;
      if (interact != null && interact.CanInteract)
      {
        return interact;
      }
    }
    
    return null;
  }
  
  function OnLogicUpdate(event : UpdateEvent)
  {
    if (this.NetUser.IsClient)
    {
      if (this.NetUser.IsMine)
      {
        this.InputAngle += Zero.Mouse.RawMovement * this.Sensativity;
        this.InputUp = Zero.Keyboard.KeyIsDown(this.MoveForwardKey);
        this.InputDown = Zero.Keyboard.KeyIsDown(this.MoveBackKey);
        this.InputLeft = Zero.Keyboard.KeyIsDown(this.MoveLeftKey);
        this.InputRight = Zero.Keyboard.KeyIsDown(this.MoveRightKey);
        this.InputJump = Zero.Keyboard.KeyIsDown(this.JumpKey);
        this.InputInteract = Zero.Keyboard.KeyIsDown(this.InteractKey);
        this.InputRun = Zero.Keyboard.KeyIsDown(this.RunKey);
        this.InputActivatePrimary = Zero.Mouse.IsButtonDown(MouseButtons.Left);
        this.InputActivateSecondary = Zero.Mouse.IsButtonDown(MouseButtons.Right);
        
        this.UpdateCharacter(event);
        
        var interact = this.FindInteract();
        if (interact != null)
        {
          Console.WriteLine(interact.Info);
        }
        else
        {
          Console.WriteLine("-------------------");
        }
      }
      else
      {
        this.UpdateCharacter(event);
      }
    }
    else
    {
      // Compute the player movement vector based on the client's input.
      var movement = Real3(0, 0, 0);
      
      // (These input property values are replicated to us from the owning client whenever their state changes.
      // We are still authoritative over the player's other properties, such as Translation and Rotation,
      // so clients are unable to cheat by trying to set their own position / orientation.)
      if(this.InputUp)
        movement -= Real3.ZAxis;
      if(this.InputDown)
        movement += Real3.ZAxis;
      if(this.InputLeft)
        movement -= Real3.XAxis;
      if(this.InputRight)
        movement += Real3.XAxis;
      
      // Normalize the movement vector (so player's can't move faster diagonally)
      // and scale it by our movement scalar so our player's go as fast we want them to.
      movement = Math.Normalize(movement);
      
      // Apply a force to move the player in the direction the client intended.
      movement = this.Transform.TransformNormal(movement);
      
      if (this.InputRun)
        this.SweptController.MaxMoveSpeed = this.RunSpeed;
      else
        this.SweptController.MaxMoveSpeed = this.NormalSpeed;
      
      this.SweptController.Update(movement, event.Dt);
      
      //Handle Jumping
      if(this.InputJump)
        this.SweptController.Jump();
      
      this.CharacterAnimations.Jumping = !this.SweptController.Grounded;
      this.UpdateCharacter(event);
    }
    
    // Primary
    if (this.InputActivatePrimary && !this.LastInputActivatePrimary)
    {
      if (this.HeldItem != null)
      {
        this.HeldItem.PrimaryActive = true;
        this.HeldItem.ActivatePrimary(this.Owner);
      }
    }
    else if (!this.InputActivatePrimary && this.LastInputActivatePrimary)
    {
      if (this.HeldItem != null)
      {
        this.HeldItem.PrimaryActive = false;
        this.HeldItem.DeactivatePrimary(this.Owner);
      }
    }
    this.LastInputActivatePrimary = this.InputActivatePrimary;
    
    // Secondary
    if (this.InputActivateSecondary && !this.LastInputActivateSecondary)
    {
      if (this.HeldItem != null)
      {
        this.HeldItem.SecondaryActive = true;
        this.HeldItem.ActivateSecondary(this.Owner);
      }
    }
    else if (!this.InputActivateSecondary && this.LastInputActivateSecondary)
    {
      if (this.HeldItem != null)
      {
        this.HeldItem.SecondaryActive = false;
        this.HeldItem.DeactivateSecondary(this.Owner);
      }
    }
    this.LastInputActivateSecondary = this.InputActivateSecondary;
    
    // Interact
    if (this.InputInteract && !this.LastInputInteract)
    {
      var interact = this.FindInteract();
      if (interact != null)
      {
        interact.Interact(this.Owner);
      }
    }
    this.LastInputInteract = this.InputInteract;
  }
}
